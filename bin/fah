#! /usr/bin/env python3

import importlib
import inspect
import os
import sys
import textwrap

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

VERSION = "1.0.7-dev0"

ansi_colors = {
    "reset": "\x1B[0m",
    "red": "\x1B[1;31m",
    "green": "\x1B[1;32m",
    "yellow": "\x1B[1;33m",
}

valid_tools = ["cat", "longest", "random", "select", "summary", "uniq"]


def print_msg_and_usage(msg=False):
    if msg:
        print(msg, file=sys.stdout)

    usage = inspect.cleandoc(
        # TODO
        """
    usage:
    fah -h|--help.      print a help message and exit.
    fah -V|--version.   print the version string and exit.
    fah <tool> [ARGS].  run <tool>.
    """
    )
    print(f"{usage}")
    tools = ", ".join(valid_tools) + "."
    print(f"<tool> is one of {textwrap.fill(tools)}")


def print_version():
    print(f"fah {VERSION}")


if __name__ == "__main__":

    if len(sys.argv) == 1:
        print_msg_and_usage()
        exit(0)

    elif sys.argv[1] in ["-V", "--version"]:
        print_version()
        exit(0)

    elif sys.argv[1] in ["-h", "--help"]:
        print_msg_and_usage()
        exit(0)

    elif sys.argv[1] in valid_tools:
        ##print(f"Trying to import {sys.argv[1]}")
        mod = importlib.import_module(f"fah.{sys.argv[1]}", package=None)
        sys.argv.pop(1)  # remove tool name from cmdline args
        mod.main()

    else:
        print_msg_and_usage(
            f'{ansi_colors["red"]}[ERROR]{ansi_colors["reset"]} '
            f'fah: tool "{sys.argv[1]}" not recognized.'
        )
        exit(1)
