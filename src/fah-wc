#! /usr/bin/env python

import argparse
import math
import sys
from Bio import SeqIO
from Bio.Seq import Seq
from scipy.stats import chi2

char_counts = {}
word_counts = {}


def update(word, charset):
    global char_counts, word_counts

    unambiguous = True
    for c in word:
        if c not in charset:
            unambiguous = False
            continue
        if c not in char_counts:
            char_counts[c] = 0
        char_counts[c] += 1

    if unambiguous:
        if word not in word_counts:
            word_counts[word] = 0
        word_counts[word] += 1


def simple_word_prob(word, char_freqs):
    p = 1.0
    for c in word:
        ##print(f"DEBUG c={c} char_freq={char_freqs[c] :0.3} accum_prob={p :0.3}")
        p *= char_freqs[c]
    ##exit(1)
    return p


def print_stats_0():
    global char_counts, word_counts

    total_char_count = 0
    for c in char_counts:
        total_char_count += char_counts[c]

    char_freqs = {}
    for c in char_counts:
        char_freqs[c] = char_counts[c] / total_char_count

    total_word_count = 0
    for w in word_counts:
        total_word_count += word_counts[w]

    g2 = 0
    nw = 0
    num_at_least_5 = 0
    for w in word_counts:
        nw += 1
        nobs = word_counts[w]
        nexp = total_word_count * simple_word_prob(w, char_freqs)
        if nobs > 4:
            num_at_least_5 += 1
        if nobs != 0:
            g2 += 2 * nobs * math.log(nobs / nexp)
        print(f"{w}\t{nobs}\t{nexp :0.1f}")

    if num_at_least_5 > nw / 2:
        print(f"# dof={nw - 1}\tg2={g2}\tp={chi2.sf(g2, nw - 1) :0.3f}")

    t = []

    for c in sorted(char_counts):
        t.append(f"f_{c}={char_freqs[c] :0.3f}")
    print("# " + " ".join(t))


if __name__ == "__main__":

    charsets = {"DNA": "ACGT", "RNA": "ACGU", "PEPTIDE": "ACDEFGHIKLMNPQRSTVWY"}

    ap = argparse.ArgumentParser(
        description="Write the abundance of each kmer relative to the abundance of its "
        "characters.",
        epilog=f"Counts of each word of length WORD_SIZE are computed and compared to "
        "the counts expected for a word generated by completely random selection of its "
        "characters. For sequences of type DNA or RNA, words with characters not in "
        f"{charsets['DNA']} or {charsets['RNA']}, respectively, are ignored; for "
        f"sequences of type PEPTIDE the character set is {charsets['PEPTIDE']}.",
    )
    ap.add_argument(
        "infile", nargs="?", default=sys.stdin, help="filename (default: stdin)"
    )

    ap.add_argument(
        "-t",
        "--type",
        choices=["DNA", "RNA", "PEPTIDE"],
        default="DNA",
        help="type of sequence(s) to generate.",
    )

    ap.add_argument(
        "-w",
        "--word-size",
        type=int,
        action="store",
        dest="wsize",
        default=5,
        help="word size, default 5",
    )

    args = ap.parse_args()

    for r in SeqIO.parse(args.infile, "fasta"):
        stext = "".join(str(r.seq).split()).upper()
        slen = len(stext)
        for i in range(slen - args.wsize):
            word = stext[i : i + args.wsize]
            update(word, charsets[args.type])

    print_stats_0()
