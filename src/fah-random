#! /usr/bin/env python

import sys
import argparse
import numpy as np

parser = argparse.ArgumentParser()
parser.add_argument(
    "-l",
    "--len",
    type=int,
    default=1000,
    help="mean length of output sequences, default LEN=1000",
)
parser.add_argument(
    "-n", "--num", type=int, default=1, help="number of sequences to generate"
)
parser.add_argument(
    "-N", "--noise", type=float, default=0.0, help="frequency of N as a base"
)
parser.add_argument(
    "-r",
    "--rand",
    action="store_true",
    default=False,
    help="sequences have random length, Poisson-distributed with mean LEN",
)
args = parser.parse_args()

if args.noise < 0 or args.noise > 100:
    print(
        f"[ERROR] noise percentage needs to be between 0 and 100, specified {args.noise}",
        file=sys.stderr,
    )
    exit(1)

pn = args.noise / 100
pothers = (1 - pn) / 4

for i in range(args.num):
    if args.rand:
        seqlen = np.random.poisson(args.len)
    else:
        seqlen = args.len

    ##print(seqlen)
    bases = np.random.choice(["A", "C", "G", "T", "N"], size=seqlen, p = [pothers, pothers, pothers, pothers, pn])
    print(f">{i + 1}")
    print(f"{''.join(bases)}")
