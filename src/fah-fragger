#! /usr/bin/env python

import argparse
import numpy as np
import sys
from Bio import SeqIO
from Bio.Seq import Seq

parser = argparse.ArgumentParser(
    description="Fragment a set of sequences, fragment lengths are Poisson-distributed.",
    epilog="Fragments of nominal length MEAN_LEN are generated for each input sequence "
    "with the goal of generating a coverage of COVERAGE. By default all fragments are "
    "from the forward direction. With --random-strand below, the input is assumed to be "
    "DNA/RNA and fragments from the reverse complement are included.",
)
parser.add_argument(
    "infile", nargs="?", default=sys.stdin, help="filename, default stdin."
)
parser.add_argument(
    "-c",
    "--coverage",
    type=float,
    default=1.0,
    action="store",
    help="nominal coverage, default 1.0.",
)
parser.add_argument(
    "-m",
    "--len",
    "--mean-len",
    type=float,
    default=100,
    dest="mean_len",
    action="store",
    help="mean fragment length, default 100.",
)
parser.add_argument(
    "-R",
    "--random-strand",
    default=False,
    action="store_true",
    help="the input is DNA/RNA and choose the strand randomly, default forward "
    "only.",
)
# 23456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789
args = parser.parse_args()

count = 0

for r in SeqIO.parse(args.infile, "fasta"):
    sid = str(r.id)
    stext = str(r.seq)
    desc = str(r.description)
    max_tries = 1 + 2 * int(args.coverage * len(stext) / args.mean_len)
    need_hits = 1 + int(args.coverage * len(stext) / args.mean_len)
    # print("Max_tries: ", max_tries)
    tries = 0
    hits = 0
    while True:
        size = np.random.poisson(lam=args.mean_len)
        idx = np.random.randint(0, len(stext))
        if idx + size < len(stext):
            # print("Hit")
            count += 1
            hits += 1
            outseq = stext[idx : idx + size - 1]
            strand = "+"
            start = idx + 1
            end = idx + size - 1
            if args.random_strand and np.random.uniform() < 0.5:
                outseq = str(Seq(outseq).reverse_complement())
                strand = "-"
            print(
                f'>frag{count} source="{sid}" start="{start}" end="{end}" strand="{strand}"\n{outseq}'
            )
            if hits == need_hits:
                break
        else:
            pass
            # print("Miss")
        tries += 1
        if tries == max_tries:
            break
